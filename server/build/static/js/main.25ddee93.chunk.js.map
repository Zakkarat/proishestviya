{"version":3,"sources":["components/Navbar.js","components/Card.js","components/History.js","App.js","serviceWorker.js","index.js"],"names":["NavbarPage","useState","page","setPage","color","dark","expand","className","center","active","onClick","to","CardExample","occassion","setOccassion","lastDate","setLastDate","submited","setSubmited","useEffect","a","fetch","then","data","json","time","difference","Date","getTime","hoursDifference","Math","floor","minutesDifference","hours","minutes","calcTime","length","setDate","console","log","handleClick","method","headers","body","JSON","stringify","story","res","style","height","src","waves","value","onChange","target","label","onKeyDown","e","key","href","History","setData","fetchData","reverse","map","elem","xl","locale","fromNow","parseInt","App","Navbar","path","exact","component","Card","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.25ddee93.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\nMDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse, MDBFormInline,\r\nMDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem\r\n} from \"mdbreact\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nconst NavbarPage = () => {\r\n  const [page, setPage] = useState(true)\r\n\r\n  return (\r\n      <MDBNavbar color=\"elegant-color\" dark expand=\"md\">\r\n        <MDBNavbarNav className=\"black-text\" center>\r\n        <MDBNavItem active={page} onClick={() => setPage(true)}>\r\n              <MDBNavLink to=\"/\">Главная Событейная</MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem active={!page} onClick={() => setPage(false)} >\r\n              <MDBNavLink to=\"/history\">История наших проишествий</MDBNavLink>\r\n            </MDBNavItem>\r\n        </MDBNavbarNav>\r\n      </MDBNavbar>\r\n    );\r\n}\r\n\r\nexport default NavbarPage;","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  MDBBtn,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardImage,\r\n  MDBCardTitle,\r\n  MDBCardText,\r\n  MDBCol,\r\n  MDBInput\r\n} from \"mdbreact\";\r\n\r\nconst CardExample = () => {\r\n  const [occassion, setOccassion] = useState(\"\");\r\n  const [lastDate, setLastDate] = useState(\"\");\r\n  const [submited, setSubmited] = useState(false);\r\n  useEffect(() => {\r\n    const setDate = async () => {\r\n      const data = await fetch(\"/proishestviya\").then(\r\n        async data => await data.json()\r\n      );\r\n      const calcTime = ({ time }) => {\r\n        if (time) {\r\n          let difference = new Date().getTime() - time;\r\n          const hoursDifference = Math.floor(difference / 1000 / 60 / 60);\r\n          difference -= hoursDifference * 1000 * 60 * 60;\r\n\r\n          const minutesDifference = Math.floor(difference / 1000 / 60);\r\n          difference -= minutesDifference * 1000 * 60;\r\n          return { hours: hoursDifference, minutes: minutesDifference };\r\n        }\r\n      };\r\n      setLastDate(calcTime(data[data.length - 1]));\r\n    };\r\n    setDate();\r\n    console.log(lastDate);\r\n  }, []);\r\n\r\n  const handleHours = () => {\r\n    if (lastDate) {\r\n      return lastDate.hours === 1\r\n        ? \"час\"\r\n        : lastDate.hours > 1 && lastDate.hours < 5\r\n        ? \"часа\"\r\n        : \"часов\";\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  const handleClick = () => {\r\n    console.log(lastDate);\r\n    fetch(\"/proishestviya\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ story: occassion })\r\n    }).then(res => {\r\n      console.log(res);\r\n    });\r\n    setOccassion(\"\");\r\n    setSubmited(true); \r\n  };\r\n  return (\r\n    <MDBCol>\r\n      <MDBCard>\r\n        {!submited ? <><MDBCardImage\r\n          className=\"img-fluid mx-auto rounded-circle mt-3\"\r\n          style={{ height: \"300px\" }}\r\n          src=\"./natalie.jpg\"\r\n          waves\r\n        />\r\n        <MDBCardBody>\r\n          <MDBCardTitle className=\"black-text\">\r\n            Что-то случилось с Натали? А то не случалось уже целых{\" \"}\r\n            {`${lastDate.hours ? `${lastDate.hours} ${handleHours()}` : \"\"} ${\r\n              lastDate.minutes\r\n            } минут!`}\r\n            {() => {\r\n              console.log(lastDate);\r\n            }}\r\n          </MDBCardTitle>\r\n          <MDBCardText>\r\n            <MDBInput\r\n              value={occassion}\r\n              onChange={({ target }) => setOccassion(target.value)}\r\n              label=\"А что случилось?\"\r\n              onKeyDown={(e) => e.key === 'Enter' ? handleClick() : null }\r\n            />\r\n          </MDBCardText>\r\n          <MDBBtn onClick={handleClick} href=\"#\">\r\n            Объявить об этом на весь мир!\r\n          </MDBBtn>\r\n          </MDBCardBody></> : <><MDBCardImage\r\n          className=\"img-fluid mx-auto rounded-circle mt-3\"\r\n          style={{ height: \"300px\" }}\r\n          src=\"./natalie.jpg\"\r\n          waves\r\n        />\r\n        <MDBCardBody>\r\n          <MDBCardTitle className=\"black-text\">\r\n            Cпасибо, что уведомили! Теперь это можно просмотреть в истории наших проишествий!\r\n          </MDBCardTitle>\r\n          </MDBCardBody></>}\r\n      </MDBCard>\r\n    </MDBCol>\r\n  );\r\n};\r\n\r\nexport default CardExample;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { MDBCard, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBCardBody } from \"mdbreact\";\r\nimport Moment from 'react-moment'\r\nimport 'moment/locale/ru';\r\nconst History = () => {\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const data = await fetch(\"/proishestviya\").then(\r\n        async res => await res.json()\r\n      );\r\n      setData(data);\r\n      console.log(data);\r\n    };\r\n\r\n    fetchData()\r\n    console.log(data)\r\n  }, []);\r\n  return (\r\n    <>\r\n      <MDBRow className=\"mb-4\">\r\n      {data.reverse().map(elem => (\r\n    <MDBCol xl=\"12\" className='mb-5'>\r\n    <MDBCard>\r\n      <MDBCardBody>\r\n      <MDBCardTitle style={{'color': 'black'}}>{elem.story}</MDBCardTitle>\r\n        <MDBCardText>\r\n      Вот такое с Натали случилось <Moment locale='ru' fromNow>{parseInt(elem.time)}</Moment>\r\n        </MDBCardText>\r\n      </MDBCardBody>\r\n    </MDBCard>\r\n  </MDBCol>\r\n      ))}\r\n      </MDBRow>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default History;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./index.css\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Card from \"./components/Card\";\r\nimport History from \"./components/History\"\r\nimport { MDBContainer } from \"mdbreact\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Navbar></Navbar>\r\n        <MDBContainer className=\"App-header mt-5\">\r\n          <Switch>\r\n          <Route path=\"/\" exact component={Card} />\r\n            <Route path=\"/history\" component={History} />\r\n          </Switch>\r\n        </MDBContainer>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}